<?php
/**
 * Created by PhpStorm.
 * User: suleymantopaloglu
 * Date: 25.09.18
 * Time: 22:17
 */

namespace _list;

use Model;
use FETCH_TYPE;
use FETCH_STRUCTURE;

class Message_Model extends Model
{

        public function __destruct()
        {
                parent::__destruct(); // TODO: Change the autogenerated stub
        }


        public function connect()
        {
                parent::connect(); // TODO: Change the autogenerated stub
        }


        function fetchAll()
        {

                // $this->pars->club_id = 40;
                $club_id = $this->pars->club_id ? $this->pars->club_id : 0 ;

                $this->connect();

                $this->db = new \Database();
                $query = "SELECT *,
                      (SELECT messages.title ) as display_name,
                      (SELECT DATE_FORMAT(messages.created_at,'%d.%m.%Y %H:%i')) as message_pretty_date,
                      (SELECT JSON_EXTRACT((SELECT JSON_EXTRACT(members, '$.\"{$this->pars->uid}\"')), '$[0]')) as is_read,
                      (SELECT JSON_EXTRACT((SELECT JSON_EXTRACT(members, '$.\"{$this->pars->uid}\"')), '$[1]')) as is_delete
                      
                      FROM messages";

                if (!is_null($this->pars->customQuery)) {

                        $query .= " " . $this->pars->customQuery;
                } else {

                        $query .= " WHERE";
                        if (!is_null($this->pars->id)) {
                                $query .= " id=" . $this->pars->id;
                                $query .= " AND";
                        }
                        $query .= " club_id=" . $club_id;


                        $query .= " ORDER BY id DESC;";
                }


                $this->db->setQuery($query);
                $this->db->setFetchType(FETCH_TYPE::ASSOC);
                $this->db->setSingleValueWithKey(true);
                $data = $this->db->fetch();

                #echo $this->db->getQueryString();
                return (object)array(
                        "resulta" => $this->db->resulta,
                        "process" => $this->db->process,
                        "data" => $data,
                        "errCode" => $this->db->errCode,
                        "errInfo" => $this->db->errInfo,
                        "sql" => $this->db->getQueryString()
                );


        }


        public function __construct()
        {
                parent::__construct();

        }

}

namespace _content;

use Model;
use FETCH_TYPE;
use FETCH_STRUCTURE;
use _list\Message_Model as Messages_Model;
use ReflectionException;
use MAIL;

class Message_Model extends Model
{

        public function connect()
        {
                parent::connect(); // TODO: Change the autogenerated stub
        }

        function fetch()
        {

                try {
                        $messages = new Messages_Model();

                        $this->pars->customQuery = "WHERE id=" . $this->pars->id . " ORDER BY id ASC LIMIT 1;";
                        $messages->pars = $this->pars;
                        return $messages->fetchAll();

                } catch (ReflectionException $e) {

                }

                return null;

        }

        function setAsRead($originalMessage)
        {

                $this->connect();
                $this->db->setTable("messages");

                // Convert Original Message Users Part to Array
                $originalMessage = json_decode($originalMessage["members"], true);

                // Get part of Message For User
                $isMessage = $originalMessage[$this->pars->uid];

                // Store Delete part for Message
                $storeDeleted = $isMessage[MAIL::DELETE];

                // Update New Variable for Message
                $originalMessage[$this->pars->uid] = array(1, (!$storeDeleted ? 0 : $storeDeleted));

                // Updated Original Message to JSON String
                $originalMessage = json_encode($originalMessage);

                // Set encoded string to users column
                $this->db->set("members", $originalMessage);

                // Condition for Message with his ID
                $this->db->setCondition("id", $this->pars->id);

                // Update Table
                $this->db->Update();

                // echo $this->db->getQueryString();

        }


        public function __construct()
        {
                parent::__construct();
        }

        function delete(){

                // $membersOfNews  = json_decode($this->pars->new["members"],true);

                $membersOfNews[$this->pars->uid] = array(1,1);

                $myDataJSONString = json_encode($membersOfNews);


                $this->connect();
                $this->db->setTable("messages");
                $this->db->setCondition("id", $this->pars->new["id"]);
                $this->db->set("members", $myDataJSONString);
                $this->db->Update();

                return array(
                        "resulta"=>true, //$this->db->resulta,
                        "process"=>$this->db->process,
                        "errInfo"=>$this->db->errInfo,
                        "errCode"=>$this->db->errCode,
                        "sql"=>$this->db->getQueryString(),
                        "query"=>$this->db->getQueryString()
                );

        }


        public function __destruct()
        {
                parent::__destruct(); // TODO: Change the autogenerated stub
        }

}