<?php
/**
 * Created by PhpStorm.
 * User: suleymantopaloglu
 * Date: 25.09.18
 * Time: 22:17
 */


namespace owner;
use Model;
use REPOSITORY;
use ANLASS;
use ANWESENHEIT;
use Database;
use Config;
class Member_Model extends Model
{

        public function __destruct()
        {
                parent::__destruct(); // TODO: Change the autogenerated stub
        }

        public function __construct()
        {
                parent::__construct();
        }

        public function connect()
        {
                parent::connect(); // TODO: Change the autogenerated stub
        }

        private function fetchPerformance( $statement = "" ){

                $myID = REPOSITORY::read(REPOSITORY::CURRENT_USER)["id"];
                $anlassTraining         = array(ANLASS::TRAINING);
                $anlassSpiel            = array(ANLASS::LIGASPIEL, ANLASS::TESTSPIEL, ANLASS::POKALSPIEL, ANLASS::TURNIER);

                $sql = "
                    SELECT *,
                    (SELECT anwesenheit FROM " . Config::DB_Name . ".anwesenheit as anw WHERE anw.termin=t.id AND anw.kontakt={$myID}) as anwesenheit,
                    (SELECT anwesenheit FROM " . Config::DB_Name . ".anwesenheit as anw WHERE anw.termin=t.id AND anw.anwesenheit=" . ANWESENHEIT::YES . " AND anw.kontakt={$myID}) as my_availability,
                    (SELECT feedback FROM " . Config::DB_Name . ".anwesenheit as anw WHERE anw.termin=t.id AND anw.kontakt={$myID}) as meeting_reason_feedback,
                    (SELECT feedback_comment FROM " . Config::DB_Name . ".anwesenheit as anw WHERE anw.termin=t.id AND anw.kontakt={$myID}) as meeting_reason_feedback_comment,
                    (SELECT reason FROM " . Config::DB_Name . ".anwesenheit as anw WHERE anw.termin=t.id AND anw.kontakt={$myID}) as meeting_reason,
                    (SELECT reason_comment FROM " . Config::DB_Name . ".anwesenheit as anw WHERE anw.termin=t.id AND anw.kontakt={$myID}) as meeting_reason_comment
                    
                    
                    FROM termine as t WHERE t.datum {$statement}
                    ";


                $this->db = new Database();
                $this->db->setQuery($sql);
                $this->db->setSingleValueWithKey(true);
                $monthMeetings = $this->db->fetch();

                return $monthMeetings;
        }



        function fetchMonthPerformance()
        {

                if( !is_null($this->pars->month) && !empty($this->pars->month) ){

                        $statement = "BETWEEN DATE_FORMAT(NOW(),CONCAT('%Y-'," . $this->pars->month . ", '-01')) AND DATE_FORMAT(LAST_DAY(NOW()), CONCAT('%Y-'," . $this->pars->month . ", '-%d'))";

                        return $this->fetchPerformance( $statement );

                }

                die("Please enter the month");



        }

        function fetchWeekPerformance()
        {

                if( !is_null($this->pars->date) && !empty($this->pars->date) ){

                        $statement = "BETWEEN FIRST_DAY_OF_WEEK('" . $this->pars->date . "') AND LAST_DAY_OF_WEEK('" . $this->pars->date . "')";
                        return $this->fetchPerformance( $statement );

                }

                die("Please enter the date for week");
        }
}

namespace role;
use Model;
class Member_Model extends Model
{

        /**
         * User_Model constructor.
         */
        public function __construct()
        {
                parent::__construct();
        }

        public function __destruct()
        {
                parent::__destruct(); // TODO: Change the autogenerated stub
        }

        /**
         * @return object
         * @deprecated
         * @use Role/manage/delete
         */
        function delete(){


                $sql = "DELETE FROM user_using_roles WHERE id=" . $this->pars->id;

                if( !is_null($this->pars->id) ){

                        $this->connect();
                        $this->db->setQuery($sql);
                        $this->db->Delete();

                        return $this->db;


                }

                return (object) array(
                        "resulta"=>true,
                        "process"=>true
                        );

        }

        public function connect()
        {
                parent::connect(); // TODO: Change the autogenerated stub
        }


}

namespace friends;
use Model;
class Member_Model extends Model
{

        /**
         * User_Model constructor.
         */
        public function __construct()
        {
                parent::__construct();
        }

        public function __destruct()
        {
                parent::__destruct(); // TODO: Change the autogenerated stub
        }

        public function connect()
        {
                parent::connect(); // TODO: Change the autogenerated stub
        }


}