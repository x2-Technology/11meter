<?php
/**
 * Created by PhpStorm.
 * User: suleymantopaloglu
 * Date: 22.10.18
 * Time: 09:36
 */

namespace _start;
use Model;

class Settings_Model extends Model
{
        public function connect()
        {
                parent::connect(); // TODO: Change the autogenerated stub
        }


        public function __construct()
        {
                parent::__construct();
        }

        public function __destruct()
        {
                parent::__destruct(); // TODO: Change the autogenerated stub
        }


}

namespace _password;
use Model;

class Settings_Model extends Model
{
        public function connect()
        {
                parent::connect(); // TODO: Change the autogenerated stub
        }


        public function __construct()
        {
                parent::__construct();
        }

        public function __destruct()
        {
                parent::__destruct(); // TODO: Change the autogenerated stub
        }

        function fetchMe(){

                include "Models/Contact_Model.php";
                $contact = new \_list\Contact_Model();
                unset($this->pars->output);
                unset($this->pars->with_session);
                $contact->pars = $this->pars;
                $data = $contact->fetchAll();

                if (count($data)) {
                        return array_shift($data);
                }

                return null;

        }

        function save(){

                $sql = "UPDATE kontakt SET password='{$this->pars->password}' WHERE id={$this->pars->uid}";

                // echo $sql;
                // $this->db = new \Database();
                $this->connect();
                $this->db->setQuery($sql);
                $this->db->queryExecute();
                return $this->db;

        }


}

namespace _general;
use Model;

class Settings_Model extends Model
{
        public function connect()
        {
                parent::connect(); // TODO: Change the autogenerated stub
        }


        public function __construct()
        {
                parent::__construct();
        }

        public function __destruct()
        {
                parent::__destruct(); // TODO: Change the autogenerated stub
        }


}

namespace _notification;
use Model;
class Settings_Model extends Model{



        function __construct() {
                parent::__construct();
        }

        public function connect()
        {
                parent::connect(); // TODO: Change the autogenerated stub
        }

        function settingsFetch(){

                #highlight_string(var_export($this->pars->u_settings, true));
                $this->connect();

                $sql = "SELECT 
                            *,
                            (SELECT sr.name FROM settings_role as sr WHERE id=ss.role) as role_name,
                            (SELECT sr.plan FROM settings_role as sr WHERE id=ss.role) as role_with_plan,
                            (SELECT CONCAT('$.',ss.key)) as con,
                            IF('{$this->pars->u_settings}' <> '' , (SELECT JSON_UNQUOTE(JSON_EXTRACT('{$this->pars->u_settings}', CONCAT('$.', ss.key)))) , NULL)   as setting_value
                            FROM settings_source as ss ORDER BY sort ASC;";

                $this->db->setQuery($sql);
                $data = $this->db->fetch();
                #echo $this->db->getQueryString();
                return array(
                        "resulta"=>$this->db->resulta,
                        "process"=>$this->db->process,
                        "errInfo"=>$this->db->errInfo,
                        "errCode"=>$this->db->errCode,
                        "sql"=>$this->db->sql,
                        "data"=>$data
                );

        }


        function __destruct()
        {
                parent::__destruct(); // TODO: Change the autogenerated stub
        }


}

namespace _how_us_found;
use Model;
class Settings_Model extends Model{



        function __construct() {
                parent::__construct();
        }

        public function connect()
        {
                parent::connect(); // TODO: Change the autogenerated stub
        }

        function fetchHuf(){


                $query = "SELECT * FROM feedback_huf";
                $this->connect();
                // $this->db = new \Database();
                $this->db->setQuery($query);
                $this->db->setSingleValueWithKey(true);
                return $this->db->fetch();

        }

        function save(){


                $query = "SELECT * FROM feedback_huf";
                $this->connect();
                // $this->db = new \Database();
                $this->db->setQuery($query);
                $this->db->setSingleValueWithKey(true);
                return $this->db->fetch();

        }


        function __destruct()
        {
                parent::__destruct(); // TODO: Change the autogenerated stub
        }


}

namespace _code;
use manage\Role_Model as Role_Model_Manage;
use Model;
use Database;
class Settings_Model extends Model{



        function __construct() {
                parent::__construct();
        }

        public function connect()
        {
                parent::connect(); // TODO: Change the autogenerated stub
        }

       function check(){

                $sql = "
                          SELECT code_management.*,
                          (SELECT name FROM code_groups WHERE code_groups.id=code_management._code_group) as pretty_code_group_name,
                          (SELECT description FROM code_groups WHERE code_groups.id=code_management._code_group) as pretty_code_group_description,
                          (JSON_EXTRACT(code_management.club_team, '$[0]')) as club_id,
                          (JSON_EXTRACT(code_management.club_team, '$[1]')) as team_id,
                          (SELECT dfb.dfb_league_clubs.teamName2 FROM dfb.dfb_league_clubs WHERE dfb.dfb_league_clubs.id=club_id) as pretty_club_name,
                          (SELECT name FROM club_teams_pool WHERE id=team_id) as pretty_team_name,
                          (SELECT DATE_FORMAT(code_management.until_at, '%d.%m.%Y %H:%i')) as pretty_until_at,
                          (IF(code_management.until_at IS NOT NULL AND code_management.until_at < NOW(), true, false )) as code_expired,
                          (IF(code_management.to_user IS NOT NULL AND code_management.to_user <> {$this->pars->uid} , true, false )) as code_using,
                          (
                            IF(
                              code_management.to_user IS NOT NULL AND 
                              code_management.to_user = {$this->pars->uid} AND 
                              
                              (SELECT JSON_EXTRACT(JSON_UNQUOTE(
                                  
                              
                              ))) IS NOT NULL
                              
                              
                              (SELECT WANTED_INDEX_IN_ARRAY(
                                  (SELECT _code FROM user_using_roles WHERE club_id=JSON_EXTRACT(code_management.club_team,'$[0]') AND IN_INDEXED_ARRAY(
                                  (SELECT team FROM user_using_roles WHERE club_id=code_management.club_id ), JSON_EXTRACT(code_management.club_team,'$[1]'))), CONCAT('\"',code_management.id, '\"' ) ) > -1  )  , 
                              true, false )) as code_using_by_me,
                              
                              
                          (SELECT register_role_id FROM code_groups WHERE code_groups.id=code_management._code_group) as code_for_role
                          FROM code_management WHERE _code='" . $this->pars->code . "'";


                /**
                 * New worked Query
                 * Updated for code_using_by_me
                 * */
                $sql = "
                        SELECT code_management.*,
                       (SELECT name FROM code_groups WHERE code_groups.id=code_management._code_group) as pretty_code_group_name,
                       (SELECT description FROM code_groups WHERE code_groups.id=code_management._code_group) as pretty_code_group_description,
                       (SELECT JSON_UNQUOTE((JSON_EXTRACT(code_management.club_team, '$[0]')))) as club_id,
                       (SELECT JSON_UNQUOTE((JSON_EXTRACT(code_management.club_team, '$[1]')))) as team_id,
                       (SELECT JSON_UNQUOTE((JSON_EXTRACT(code_management.club_team, '$[2]')))) as team_group_id,
                       (SELECT dfb.dfb_league_clubs.teamName2 FROM dfb.dfb_league_clubs WHERE dfb.dfb_league_clubs.id=club_id) as pretty_club_name,
                       (SELECT name FROM club_teams_pool WHERE id=team_id) as pretty_team_name,
                       (SELECT name FROM sub_teams WHERE id=team_group_id) as pretty_team_group_name,
                       (SELECT DATE_FORMAT(code_management.until_at, '%d.%m.%Y %H:%i')) as pretty_until_at,
                       (IF(code_management.until_at IS NOT NULL AND code_management.until_at < NOW(), true, false )) as code_expired,
                       (IF(code_management.to_user IS NOT NULL AND code_management.to_user <> {$this->pars->uid} , true, false )) as code_using,
                       (SELECT register_role_id FROM code_groups WHERE code_groups.id=code_management._code_group) as code_for_role,
                       (
                         IF(
                               /* Check For User Not Null */
                               code_management.to_user IS NOT NULL AND
                
                               /* Check For Me */
                               code_management.to_user = {$this->pars->uid} AND
                
                
                               (SELECT true FROM user_using_roles WHERE
                
                                    /* Check Role */
                                    role_id = code_for_role AND
                
                
                                    /* Check For Club */
                                    club_id = club_id AND
                
                
                                    /* Check For Team */
                                    JSON_UNQUOTE(JSON_SEARCH( team, 'one', team_id )) IS NOT NULL AND
                
                
                                    /* Check For Team Group*/
                                    JSON_UNQUOTE(JSON_SEARCH( team_group, 'one', team_group_id )) IS NOT NULL AND
                
                                    /* Check for Code */
                                    JSON_UNQUOTE(JSON_SEARCH( _code, 'one', code_management.id )) IS NOT NULL )
                                    
                                
                
                           , true, false ) ) as code_using_by_me
                
                
                FROM code_management WHERE _code='{$this->pars->code}';";



                $this->db = new Database();
                $this->db->setQuery($sql);
                $data = $this->db->fetch();
                return $data;
        }


        function bindCodeToUser(){


                $finallyProcessedUserUsingRoleId = 0;

                $this->db = new Database();
                $this->db->setTable("code_management");
                $this->db->setCondition("_code", $this->pars->code);
                $codeManagement = $this->db->fetch();

                if( is_null($codeManagement) ){
                        echo "No Licence Found!";
                }
                else {

                        /**
                         * Only One time will Activity Start
                         */
                        if( is_null($codeManagement["started_at"]) ){

                                // Start Licence active
                                $this->db->set("started_at", date("Y-m-d H:i:s"));
                                $this->db->set("to_user", $this->pars->uid); // User ID
                                $this->db->Update();

                        } else {

                                /**
                                 * Licence Already activity
                                 * Here add fake variable for Next Process
                                 */
                                $this->db->resulta = true;
                                $this->db->process = true;

                        }

                }



                #print_r($this->pars);

                if( $this->db->resulta && $this->db->process ){

                        $codeManagementData = $this->check();
                        $club_id = $codeManagementData["club_id"];
                        $team_id = $codeManagementData["team_id"];

                        $this->db = new Database();
                        $this->db->setTable("user_using_roles");
                        $this->db->setCondition("club_id", $club_id, "AND");
                        $this->db->setCondition("role_id", $codeManagementData["code_for_role"], "AND");
                        $this->db->setCondition("user_id", $this->pars->uid);
                        $userTargetRole = $this->db->fetch();


                        if( !is_null($userTargetRole) ){


                                $finallyProcessedUserUsingRoleId = $finallyProcessedUserUsingRoleId["id"];

                                $teams_of_club          = json_decode($userTargetRole["team"]);


                                /// Take target codes for Role
                                $codeOnTargetRole       = json_decode($userTargetRole["_code"]);
                                $dfbTeamNameOnTargetRole       = json_decode($userTargetRole["team_dfb_name"]);
                                $dfbTeamLinkOnTargetRole       = json_decode($userTargetRole["team_dfb_link"]);

                                if( count( $teams_of_club ) ){

                                        $user_codes_for_teams          = array();
                                        $user_dfb_team_links_for_teams = array();
                                        $user_dfb_team_names_for_teams = array();

                                        $foundTeam = false;

                                        for( $i=0; $i < count($teams_of_club); $i++ ){

                                                if( $teams_of_club[$i] == $team_id ){

                                                        $foundTeam = true;

                                                        // Add Code (Licence)
                                                        array_push($user_codes_for_teams, $codeManagementData["id"]);

                                                        // Add Code (DFB Team Name)
                                                        array_push($user_dfb_team_names_for_teams, $codeManagementData["team_dfb_name"]);

                                                        // Add Code (DFB Team Link)
                                                        array_push($user_dfb_team_links_for_teams, $codeManagementData["team_dfb_link"]);

                                                }
                                                else {

                                                        // Code döngüsünde döngüde kod (Licence ID ) varsa elleme
                                                        if( !empty($codeOnTargetRole[$i]) )
                                                        {
                                                                array_push($user_codes_for_teams, $codeOnTargetRole[$i]);
                                                        }
                                                        // Yoksa Bos Ekle
                                                        else
                                                        {
                                                                array_push($user_codes_for_teams, "");
                                                        }

                                                        // Code döngüsünde döngüde DFB Team Name varsa elleme
                                                        if( !empty($dfbTeamNameOnTargetRole[$i]) )
                                                        {
                                                                array_push($user_dfb_team_names_for_teams, $dfbTeamNameOnTargetRole[$i]);
                                                        }
                                                        // Yoksa Bos Ekle
                                                        else
                                                        {
                                                                array_push($user_dfb_team_names_for_teams, "");
                                                        }

                                                        // Code döngüsünde döngüde DFB Team Link varsa elleme
                                                        if( !empty($dfbTeamLinkOnTargetRole[$i]) )
                                                        {
                                                                array_push($user_dfb_team_links_for_teams, $dfbTeamLinkOnTargetRole[$i]);
                                                        }
                                                        // Yoksa Bos Ekle
                                                        else
                                                        {
                                                                array_push($user_dfb_team_links_for_teams, "");
                                                        }

                                                }

                                        }

                                        /**
                                         * Update user Using roles for Target club_team with Code
                                         */
                                        if( $foundTeam ){

                                                $this->db = new Database();
                                                $this->db->setTable("user_using_roles");
                                                $this->db->set("_code", json_encode($user_codes_for_teams));
                                                $this->db->set("team_dfb_name", json_encode($user_dfb_team_names_for_teams));
                                                $this->db->set("team_dfb_link", json_encode($user_dfb_team_links_for_teams));
                                                $this->db->setCondition("id", $userTargetRole["id"]);
                                                $this->db->Update();
                                        }

                                        else {

                                                /**
                                                 * Burda Club icinde takimlar var ama
                                                 * Asil hedelenen takim yok
                                                 * o Yuzden
                                                 * var olan degerleri ali array a cevipip
                                                 * hedeflenenen takim degerlerini teker teker pusluyor
                                                 * sonra json stringe cevirip geri yolluyoruz
                                                 */
                                                // Adding new team to existing teams
                                                $this->db = new Database();
                                                $this->db->setTable("user_using_roles");

                                                // Get All related columns and convert JSON string to Array
                                                $existingTeams          = json_decode($userTargetRole["team"]);
                                                $existingTeamsGroups    = json_decode($userTargetRole["team_group"]);
                                                $existingTeamDfbName    = json_decode($userTargetRole["team_dfb_name"]);
                                                $existingTeamDfbLink    = json_decode($userTargetRole["team_dfb_link"]);
                                                $existingCodes          = json_decode($userTargetRole["_code"]);

                                                // Push new Team data (team, group, dfb_name, dfb_link, code ) related Arrays
                                                array_push($existingTeams, $codeManagementData["team_id"]);
                                                array_push($existingTeamsGroups, $codeManagementData["team_group_id"]);


//                                              if not null
                                                if( !is_null($codeManagementData["team_dfb_name"]) ){
                                                        array_push($existingTeamDfbName, $codeManagementData["team_dfb_name"]);
                                                }
                                                // if not null
                                                if( !is_null($codeManagementData["team_dfb_link"]) ){
                                                        array_push($existingTeamDfbLink, $codeManagementData["team_dfb_link"]);
                                                }

                                                // Related array convert to to JSON string and set related column
                                                $this->db->set("team", json_encode($existingTeams));
                                                $this->db->set("team_group", json_encode($existingTeamsGroups));
                                                $this->db->set("team_dfb_name", json_encode($existingTeamDfbName));
                                                $this->db->set("team_dfb_link", json_encode($existingTeamDfbLink));
                                                #$this->db->set("_code", json_encode($existingCodes));
                                                #$this->db->set("_code", json_encode($user_codes_for_teams));

                                                // Code colonunu yeniden yapilandir
                                                $user_codes_for_teams = array();
                                                for( $i=0; $i < count($teams_of_club); $i++ )
                                                {
                                                        if( is_null($existingCodes[$i]) || empty($existingCodes[$i]) )
                                                        {
                                                                array_push($user_codes_for_teams, "");
                                                        }
                                                        else {
                                                                array_push($user_codes_for_teams, $existingCodes[$i]);
                                                        }
                                                }
                                                // Now Add real Code
                                                array_push($user_codes_for_teams, $codeManagementData["id"]);
                                                $this->db->set("_code", json_encode($user_codes_for_teams));



                                                $this->db->setCondition("id", $userTargetRole["id"]);
                                                $this->db->Update();

                                        }


                                }
                                else {

                                        #print_r("Burda");

                                        // √
                                        /// TODO User Using Clubs haven't team
                                        /// Club found but not team count 0 Add first team

                                        $this->db = new Database();
                                        $this->db->setTable("user_using_roles");
                                        $this->db->set("team", json_encode(array($codeManagementData["team_id"])));// json string
                                        $this->db->set("team_group", json_encode(array($codeManagementData["team_group_id"])));// json string
                                        // if not null
                                        if( !is_null($codeManagementData["team_dfb_name"]) ){
                                                $this->db->set("team_dfb_name", json_encode(array($codeManagementData["team_dfb_name"])));// json string
                                        }
                                        // if not null
                                        if( !is_null($codeManagementData["team_dfb_link"]) ){
                                                $this->db->set("team_dfb_link", json_encode(array($codeManagementData["team_dfb_link"])));// json string
                                        }
                                        $this->db->set("_code", json_encode(array($codeManagementData["id"]))); // json string
                                        $this->db->setCondition("id", $userTargetRole["id"]);
                                        $this->db->Update();

                                }


                        } else {

                                // √
                                /// TODO NO Role for user
                                /// Adding new Role Automatically for User with _code (Licence)

                                $this->db = new Database();
                                $this->db->setTable("user_using_roles");
                                $this->db->set("user_id", $codeManagementData["to_user"]);
                                $this->db->set("role_id", $codeManagementData["code_for_role"]);
                                $this->db->set("club_id", $codeManagementData["club_id"]);
                                $this->db->set("team", json_encode(array($codeManagementData["team_id"])));// json string
                                $this->db->set("team_group", json_encode(array($codeManagementData["team_group_id"])));// json string
                                // if not null
                                if( !is_null($codeManagementData["team_dfb_name"]) ){
                                        $this->db->set("team_dfb_name", json_encode(array($codeManagementData["team_dfb_name"])));// json string
                                }
                                // if not null
                                if( !is_null($codeManagementData["team_dfb_link"]) ){
                                        $this->db->set("team_dfb_link", json_encode(array($codeManagementData["team_dfb_link"])));// json string
                                }
                                $this->db->set("_code", json_encode(array($codeManagementData["id"]))); // json string

                                $this->db->Insert();

                                $finallyProcessedUserUsingRoleId = $this->db->getLastInsert();


                        }



                }

                return array(

                        "_code" => $this->pars->code,
                        "finallyProcessedUserUsingRoleId" => $finallyProcessedUserUsingRoleId


                );


        }

        function __destruct()
        {
                parent::__destruct(); // TODO: Change the autogenerated stub
        }


}

