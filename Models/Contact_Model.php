<?php
/**
 * Created by PhpStorm.
 * User: suleymantopaloglu
 * Date: 23.10.18
 * Time: 09:39
 */

namespace _list;
use Model;
use FETCH_TYPE;
use Config;
use VAR_EXTENSION;
use Database;
class Contact_Model extends Model
{

        public function connect()
        {
                parent::connect(); // TODO: Change the autogenerated stub
        }

        function fetchAll(){

                #highlight_string(var_export($this->pars, true));
                
                $this->connect();

                $sql = "SELECT kontakt.*, 
                                (SELECT kontakt.id) as uid, 
                                IF(kontakt.status = 'ja', TRUE, FALSE) as status, 
                                /*(SELECT CAST((SELECT kontakt.id) AS CHAR )) as user_id,*/
                                (SELECT DATE_FORMAT(kontakt.geburtsdatum, '%d.%m.%Y')) as geburtsdatum_pretty_format, 
                                (SELECT CONCAT(kontakt.vorname, ' ', kontakt.nachname)) as display_name,
                                (SELECT clubs.name FROM clubs WHERE clubs.id=kontakt.club_id) as club_name,
                                (SELECT CONCAT( REPLACE( kontakt.vorname, ' ', '_' ), '_', REPLACE( kontakt.nachname, ' ', '_' ), '_', (SELECT YEAR(kontakt.geburtsdatum)))) as member_image_formatted_name,
                                (SELECT CONCAT('" . Config::CLUB_DOCS_BASE_URI . "', '/' ,kontakt.club_id, '/members/', member_image_formatted_name ,'.png')) as image,
                                
                                (SELECT CONCAT('" . Config::CLUB_DOCS_BASE_URI . "', '/' ,club_id, '/members/', member_image_formatted_name ,'.png')) as member_image,
                                (SELECT CONCAT('" . Config::CLUB_DOCS_BASE_URI . "', '/' ,club_id, '/members/', member_image_formatted_name ,'" . VAR_EXTENSION::THUMB . ".png')) as member_image" . VAR_EXTENSION::THUMB . ",
                                (SELECT '/images/avatar.png') as member_image_avatar,
                                (SELECT name FROM teamrolle WHERE id=kontakt.teamrolle) as teamrolle,
                                (SELECT ms.name FROM mannschaft as ms WHERE ms.id=(SELECT TRIM(BOTH '\"' FROM (SELECT JSON_EXTRACT((SELECT mannschaft FROM playerplayed_team_with_season WHERE player_id=kontakt.id AND season_id=kontakt.current_season), '$[0]'))))) as team_name, 
                                (SELECT mannschaft FROM playerplayed_team_with_season WHERE player_id=kontakt.id AND season_id=kontakt.current_season) as mannschaft,
                                (SELECT COUNT(id) FROM user_using_roles WHERE user_id=uid) as total_role
                        FROM kontakt";

                $statement = "";

                if( !is_null($this->pars->customStatement) ){
                        $statement = $this->pars->customStatement;
                        $sql .= " WHERE {$statement}";
                } else {
                        if( !is_null($this->pars->uid) ){
                                $statement .= " kontakt.id=" .  $this->pars->uid;
                        } else {

                                // Convert Object to Array
                                $pars           = (array)$this->pars;
                                $mobil_number  = null;
                                if (!is_null($pars["mobil_number"]))
                                {
                                        $mobil_number = $pars["mobil_number"];
                                        unset($pars["mobil_number"]);
                                }

                                /* Default Pars object is String */
                                $statement = "";
                                if(count($pars)){
                                        /* Convert Pars from String Object to Array */
                                        $statement = array();
                                        foreach ($pars as $index => $par) {
                                                array_push($statement, "$index=" . $this->db->typeof( gettype($par), $par));
                                        }
                                        /* Convert Again to String */
                                        $statement = implode(" AND ", $statement);
                                        $statement = " AND " . $statement;
                                }


                                if (!is_null($mobil_number))
                                {
                                        $statement = "(mobil_number LIKE '%{$mobil_number}' AND LENGTH('{$mobil_number}') >=10)" . $statement;
                                }
                        }

                        $sql .= " WHERE {$statement}";

                }

                // echo $sql;

                $this->db->setQuery($sql);
                $this->db->setSingleValueWithKey(true);
                $this->db->setFetchType(FETCH_TYPE::ASSOC);
                $this->db->setRowKey("id");
                $data = $this->db->fetch();
                #echo $this->db->getQueryString();
                #highlight_string(var_export($data, true));
                return $data;



        }
        
        function save(){
                // echo 1;
                #highlight_string(var_export($this->pars, true));
                // $this->db->setTable("kontakt");
                
                // Prepare Params
                $uid = $this->pars->uid;

                // unset needless params
                unset($this->pars->uid);
                unset($this->pars->output);
                unset($this->pars->with_session);

                $this->connect();
                $this->db = new \Database();
                $this->db->setTable("kontakt");
                foreach ($this->pars as $k => $v ) {
                        $this->db->set($k,$v);
                }

                $lastID = null;
                if( is_null($uid)){
                        $this->db->Insert();
                        $lastID = $this->db->getLastInsert();

                } else {

                        $this->db->setCondition("id", $uid);
                        $this->db->Update();
                        $lastID = $uid;
                }

                $process = $this->db->process;
                $resulta = $this->db->resulta;
                $errCode = $this->db->errCode;
                $errInfo = $this->db->errInfo;
                $query   = $this->db->getQueryString();

                $this->pars->uid = $lastID;
                $actuallyUserData = $this->fetchAll();

                // highlight_string(var_export($actuallyUserData, true));

                return (object) array(
                        "resulta"=>$resulta,
                        "process"=>$process,
                        "errCode"=>$errCode,
                        "errInfo"=>$errInfo,
                        "query"=>$query,
                        "lastID"=>$lastID,
                        "userData" => $actuallyUserData );

                
        }


        public function __construct()
        {
                parent::__construct();
        }

        public function __destruct()
        {
                parent::__destruct(); // TODO: Change the autogenerated stub
        }

}
