<?php

/**
 * Created by PhpStorm.
 * User: adler_supervisor
 * Date: 10.07.17
 * Time: 14:54
 */
class _Public_Model extends Model
{

        function __construct()
        {
                parent::__construct();
        }

        public function connect()
        {
                parent::connect(); // TODO: Change the autogenerated stub
        }

        function fetchLocalClubs(){

                $this->connect();
                $sql = "SELECT c.*, (SELECT CONCAT(post_code, ' ', town)) as  club_pretty_postcode_with_town FROM clubs as c";
                $this->db->setSingleValueWithKey(true);
                if (!is_null($this->pars->club_id)) {
                        $sql .= " WHERE dfb_id=" . $this->pars->club_id;
                }

                $this->db->setQuery($sql);
                $data = $this->db->fetch();
                #echo $this->db->getQueryString();

                return $data;


        }

        function getReasons($required_reason)
        {


                $this->connect();
                // $this->db = new Database();

                $sql = "SELECT * FROM meeting_reasons_with_point";
                $this->db->setSingleValueWithKey(true);
                if (!is_null($this->pars->id)) {
                        $sql .= " WHERE id=" . $this->pars->id;
                } else {

                        if (!is_null($required_reason)) {
                                $sql .= " WHERE {$required_reason}=1";
                        }

                }
                $sql .= " ORDER BY sort_ ASC;";
                $this->db->setQuery($sql);
                $data = $this->db->fetch();
                return $data;

        }


        public function __destruct()
        {
                parent::__destruct(); // TODO: Change the autogenerated stub
        }


        /**
         * @deprecated
         * @uses getRoles
         * @return array|mixed|object|string|null
         */
        function getTeamrolle()
        {


                $sql = "SELECT * FROM " . Config::DB_Name . ".teamrolle";

                if (!is_null($this->pars->statement)) {
                        $sql .= " WHERE {$this->pars->statement} ORDER BY sort ASC;";
                }

                $this->db = new Database();
                $this->db->setQuery($sql);
                $this->db->setSingleValueWithKey(true);
                $data = $this->db->fetch();
                #echo $this->db->getQueryString();
                return $data;


        }

        /*
         * User Roles
         * */
        function getRoles()
        {

                $query = "SELECT * FROM teamrolle WHERE maybelistedforappregister=1";
                $query = "SELECT * FROM register_roles WHERE maybelistedforappregister=1";
                $this->db = new Database();
                $this->db->setQuery($query);
                $this->db->setSingleValueWithKey(true);

                return $this->db->fetch();

        }

        // Get  Trainer Licence
        function getTrainerLicence(){

                $query = "SELECT * FROM trainer_licence WHERE status=1 AND listable=1";
                $this->db = new Database();
                $this->db->setQuery($query);
                $this->db->setSingleValueWithKey(true);

                return $this->db->fetch();
        }


        /*
         * User Roles
         * */
        function getSeasons()
        {

                $query = "SELECT * FROM seasons";
                $this->db = new Database();
                $this->db->setQuery($query);
                $this->db->setSingleValueWithKey(true);

                return $this->db->fetch();

        }

        /*
         * Fetch DFB League Groups
         * */
        function getDFBLeagueGroups()
        {

                // $query = "SELECT * FROM dfb.league_groups";
                $query = "SELECT * FROM leagues";
                $this->db = new Database();
                $this->db->setQuery($query);
                $this->db->setSingleValueWithKey(true);

                return $this->db->fetch();

        }


        /*
         * All DFB Clubs
         * */
        function getDFBClubs()
        {
                $this->db = new Database("dfb", "dfb", "adler299" );

                $statement = "";

                if( !is_null($this->pars->id) ){

                                $statement = " WHERE id=" . $this->pars->id ;
                } else {

                        if( !is_null($this->pars->search) && "" !== trim($this->pars->search) ){
                                $statement = " WHERE teamName2 LIKE '%" . trim($this->pars->search) . "%'";
                        }
                        $this->db->setLimit(600, 610);

                }

                $query = "SELECT *,
                                (SELECT associations.name FROM associations WHERE associations.id = association_id) as pretty_association_name
                                
                                FROM dfb.dfb_league_clubs {$statement}";
                // echo $query;
                $this->db->setQuery($query);
                $this->db->setSingleValueWithKey(true);
                $this->db->setLimit(0, 10);
                $this->db->setSingleValueWithKey(true);
                $data = $this->db->fetch();

                // echo $this->db->getQueryString();
                return $data;

                // $this->db->fetch();
                // return $this->db->getQueryString();

        }


        /**
         * Default Club Teams
         * @return array|mixed|object|string|null
         */
        function getDFBClubTeams()
        {

                $statement = "";
                if(!is_null($this->pars->teams)){

                        if( Helper::isJSON($this->pars->teams)){
                                $this->pars->teams = json_decode($this->pars->teams);
                        }

                        $statement = array();
                        if(!is_null($this->pars->teams)){

                                foreach ($this->pars->teams as $team) {
                                      array_push($statement, "id=" . $team);
                                }
                                
                        }

                        if( count($statement) ){
                                $statement = "WHERE " . implode(" OR ", $statement);
                        }
                }
                
                
                $this->db = new Database();
                $query = "SELECT * FROM club_teams_pool {$statement}";
                $this->db->setQuery($query);
                $this->db->setSingleValueWithKey(true);
                return $this->db->fetch();

        }


        /**
         * Default Club Teams
         * @return array|mixed|object|string|null
         */
        function fetchLeagues()
        {

                $statement = "";

                if( !is_null($this->pars->league_id) ){

                        $statement = " WHERE id=" . $this->pars->league_id ;
                }

                $this->db = new Database();
                $query = "SELECT * FROM leagues {$statement}";
                $this->db->setQuery($query);
                $this->db->setSingleValueWithKey(true);
                $data = $this->db->fetch();
                return $data;

        }

        // Get  DFB Club Sub Teams
        function getDFBClubSubTeams(){

                $query = "SELECT * FROM sub_teams";
                $this->db = new Database();
                $this->db->setQuery($query);
                $this->db->setSingleValueWithKey(true);

                return $this->db->fetch();
        }


        // Get  DFB Club Team groups like getDFBClubSubTeams
        function getDFBTeamGroups(){

                return $this->getDFBClubSubTeams();
        }

        // Get  DFB Club Team groups like getDFBClubSubTeams
        function fetchTrainerTeams(){

                $cr = CONFIRMATION_TYPE::TYPE_REJECTED;
                $cc = CONFIRMATION_TYPE::TYPE_CONFIRMED;
                $cw = CONFIRMATION_TYPE::TYPE_NOT_CHECKED;


                $sql = "SELECT *,
                      ( SELECT CASE WHEN confirmed_by_club={$cr} THEN 'reject.jpg' WHEN confirmed_by_club={$cc} THEN 'approved.jpg' ELSE 'empty-club.png' END ) confirmed_via_club_logo
                      FROM user_using_roles 
                      WHERE 
                      /*(confirmed_by_club IS NULL OR confirmed_by_club!=" . CONFIRMATION_TYPE::TYPE_REJECTED . ") AND */ 
                      status=1 
                      AND role_id = " . REGISTER_ROLE::ROLE_TRAINER;


                $this->db = new Database();
                $this->db->setQuery($sql);
                $this->db->setSingleValueWithKey(true);

                $data = $this->db->fetch();

                // echo $this->db->getQueryString();

                return $data;



        }


        // Get  DFB Club Sub Teams
        function fetchTimeSuggestions(){

                $query = "SELECT * FROM ad_suggestion";
                $this->db = new Database();
                $this->db->setQuery($query);
                $this->db->setSingleValueWithKey(true);

                return $this->db->fetch();
        }


        // Get  DFB Club Sub Teams
        function fetchPlaceCovering(){

                $query = "SELECT * FROM place_covering";
                $this->db = new Database();
                $this->db->setQuery($query);
                $this->db->setSingleValueWithKey(true);
                return $this->db->fetch();
        }

        // Get  All Licences other name is _code
        function getLicences(){

                $query = "SELECT *,
                        ( SELECT name FROM code_groups WHERE id=code_management._code_group ) as pretty_licence_name,
                        ( SELECT description FROM code_groups WHERE id=code_management._code_group ) as pretty_licence_description,
                        ( SELECT icon FROM code_groups WHERE id=code_management._code_group ) as licence_icon
                        FROM code_management WHERE until_at > NOW()";
                $this->db = new Database();
                $this->db->setQuery($query);
                $this->db->setSingleValueWithKey(true);

                return $this->db->fetch();
        }


        // Get  All Licences other name is _code
        function fetchPostCodes(){

                $statement = "";

                $searchKey = trim($this->pars->search);

                if( strlen($searchKey) ){

                        if( !is_null($this->pars->zc_id) ){
                                $statement = "WHERE zc_id" . $this->pars->zc_id;
                        }
                        else {
                                $statement = "WHERE (zc_zip LIKE '{$searchKey}%' OR zc_location_name LIKE '{$searchKey}%')";
                        }


                        $query = "SELECT * FROM zip_coordinates {$statement}";
                        $this->db = new Database();
                        $this->db->setQuery($query);
                        $this->db->setSingleValueWithKey(true);

                        $this->db->setRowKey("zc_id");
                        // $this->db->setLimit(0,10);
                        $data = $this->db->fetch();
                        return $data;
                }

                return null;

        }



        function getDynamicMenu()
        {

                $statement = "sample IS NULL";
                if (!is_null($this->pars->is_sample) && $this->pars->is_sample) {
                        $statement = "sample=1";
                }

                $sql = "SELECT * FROM " . Config::DB_Name . ".user_menu WHERE {$statement} ORDER BY sort ASC;";

                $this->db = new Database();
                $this->db->setQuery($sql);
                $this->db->setSingleValueWithKey(true);
                $data = $this->db->fetch();
                return $data;

        }


}